[{"content":"\u003ch1 id=\"adapting-to-a-hybrid-workforce-with-1es-tachyon-product\"\u003eAdapting to a Hybrid Workforce with 1E\u0026rsquo;s Tachyon Product\u003c/h1\u003e\n\u003cp\u003eBeginning in early 2021, there has been a trending increase in the number of people that are quitting their jobs due to what seems to be a direct result of the COVID-19 pandemic. This trend, primarily in the United States, has been termed the \u003ca href=\"https://en.wikipedia.org/wiki/Great_Resignation\"\u003eGreat Resignation\u003c/a\u003e, with \u003ca href=\"https://en.wikipedia.org/wiki/Great_Resignation\"\u003efour million\u003c/a\u003e Americans resigning in April alone.\u003c/p\u003e\n\u003cp\u003eFor some, illness directly related to COVID-19 may be why we’re seeing this shift to resigning, and for others, it may be the desire to find a new job that fits the new lifestyle that they have been forced to adopt. Whatever the case, organizations must take note and learn with the changing times. 1E seems to be tuned to this new environment with their new Tachyon v8 “experience management” product.\u003c/p\u003e\n\u003ch2 id=\"four-remote-work-scenarios-with-1es-tachyon\"\u003eFour Remote Work Scenarios with 1E’s Tachyon\u003c/h2\u003e\n\u003cp\u003eI recently watched \u003ca href=\"https://www.1e.com/resources/on-demand-webinar/tachyon-8-focus-on-what-matters-most/\"\u003ea webinar put on by 1E about their new Tachyon v8 product\u003c/a\u003e by 1E\u0026rsquo;s Chief Product Technologist, Bogdan Udrea, and Director of Product Marketing, Michael Wright. In the webinar, they outlined the key focus points on the latest release of the product called Analytics and Insights, Resolution Acceleration, Action \u0026amp; Prevention, and Engagement \u0026amp; Empowerment.\u003c/p\u003e\n\u003cp\u003eThese four areas are geared toward allowing the company to \u0026ldquo;focus on what matters most\u0026rdquo;; user experience. When a company decides to adopt a hybrid, work from anywhere, or fully remote approach, the success rides heavily on the employees\u0026rsquo;\u0026rsquo; experience that accompanies the many new challenges to be faced.\u003c/p\u003e\n\u003cp\u003eTachyon sets to answer questions like; what happens when a new application needs to be rolled out company-wide? How will the employees react? What app are they currently using and what impact will there be if it is replaced? How was the roll-out received?\u003c/p\u003e\n\u003ch3 id=\"launching-an-employee-wellbeing-campaign\"\u003eLaunching an Employee Wellbeing Campaign\u003c/h3\u003e\n\u003cp\u003eWith a workforce that is no longer in a central location, it is difficult to identify the overall experience and well-being of employees. This metric is a crucial aspect of maintaining a productive and successful culture and Tachyon v8 is set to take it on.\u003c/p\u003e\n\u003cp\u003eTachyon v8 not only aggregates metrics from the environment, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe amount of time employees spend on their machines each day\u003c/li\u003e\n\u003cli\u003eHow long it takes applications to load\u003c/li\u003e\n\u003cli\u003eHow the network is performing\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBut it also allows the company to use these metrics to build meaningful wellness campaigns. As an example, perhaps Tachyon’s reports are finding that employees are consistently working several hours more per day than the rest? What is causing this?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDo employees lack understanding of a process or application?\u003c/li\u003e\n\u003cli\u003eIs the equipment functioning as expected?\u003c/li\u003e\n\u003cli\u003eAre they simply working more because they desire to?\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWellness campaigns like the example above allow the company to stay involved and be able to send simple feedback requests from employees such as \u0026ldquo;Hey John, we noticed that you have been working several extra hours per day this month. Is everything going okay?\u0026rdquo; This may help the employee feel more involved and allow the company to fill a gap they didn\u0026rsquo;t know existed.\u003c/p\u003e\n\u003ch3 id=\"executing-a-new-software-rollout-adoption-plan\"\u003eExecuting a New Software Rollout Adoption Plan\u003c/h3\u003e\n\u003cp\u003eNobody likes change (most people anyway). This often remains true when a company decides to roll-out a new product to everyone, especially if it is a replacement to an existing product.\u003c/p\u003e\n\u003cp\u003eTo build positive expectations, Tachyon v8 helps identify employees that are using certain software which it can then send announcements and surveys to prepare them for an upgrade or changes that might affect their productivity.\u003c/p\u003e\n\u003cp\u003eMeasuring user sentiment with Tachyon v8 allows organizations to identify \u0026ldquo;champions\u0026rdquo; and \u0026ldquo;detractors\u0026rdquo;; employees that are excelling with the software or those struggling. These metrics can be used in future campaigns by providing different on-boarding approaches based on the identified personas. \u0026ldquo;Champions\u0026rdquo; may get first-look at the new tool and provide feedback that will help encourage the adoption by the \u0026ldquo;detractors\u0026rdquo;.\u003c/p\u003e\n\u003ch3 id=\"refreshing-large-groups-of-devices\"\u003eRefreshing Large Groups of Devices\u003c/h3\u003e\n\u003cp\u003eA typical scenario that is often experienced in any environment is the need to \u0026ldquo;reset\u0026rdquo; or \u0026ldquo;restart\u0026rdquo; a device or service that may impact the end-user due to a recent change or issue. Care must be made to ensure everyone isn\u0026rsquo;t affected at the same time, or worse, the issue is made worse.\u003c/p\u003e\n\u003cp\u003eTachyon relies heavily on the metrics collected in the environment and can help identify who is affected most or which groups of people can be used to stage the refresh. The company can create managed groups within the platform and associate them as \u0026ldquo;Power Users\u0026rdquo; who receive the refresh first. Again, collecting feedback for use on the rest of the project.\u003c/p\u003e\n\u003ch3 id=\"leveraging-self-service-to-give-the-employee-more-control\"\u003eLeveraging Self-Service to Give the Employee More Control\u003c/h3\u003e\n\u003cp\u003eSelf-service is an empowering component of Tachyon v8 as it allows the employee to feel involved in software decisions. Rather than forcing a change upon them, or requiring them to always rely upon the helpdesk to resolve an issue, Tachyon puts some of these actions in the employees hands, at their leisure.\u003c/p\u003e\n\u003cp\u003eFor example, lets say the company is rolling out that new application. Rather than forcing the application install at a specific time, Tachyon 8 allows the user to choose the time that is convenient for them. This action would be made available and easily accessible within the agent running on the machine.\u003c/p\u003e\n\u003cp\u003eAlong the same lines, what if the application is having issues running or is slow to connect to an API, etc.? There may be some self-service actions available to the end-user where they can request the app be refreshed, reloaded, etc. Again, empowering the employee so that the feel more empowered and not reliant on someone else when they are working remotely.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eOverall, I think the approach that Tachyon v8 has taken to ensure that the employee experience is top-notch. The metrics-driven approach is key to building a thriving business despite the many uncertain factors that have come into play over the past two years.\u003c/p\u003e\n\u003cp\u003eOrganizations are only going to continue to adopt the “work from anywhere” motto. The longer it takes companies to embrace this (for businesses that don\u0026rsquo;t rely on an in-person presence) the more difficult it is going to be. Tachyon v8 is platform that has many component that may help fill the gaps needed to encourage their success.\u003c/p\u003e\n\u003ch2 id=\"more-info\"\u003eMore Info\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.1e.com/products/tachyon/\"\u003eProduct Website\u003c/a\u003e\u003c/p\u003e\n","description":"Personal review of 1E's Tachyon product","image":"/images/1E_Logo.jpg","permalink":"https://kyleparrish.com/blogs/techyon-1e-review/","title":"Adapting to a Hybrid Workforce with 1E's Tachyon 8 Product"},{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eRecently, I was working on a PowerShell scripts that I wanted to share with others on my team but did not want to commit it to our Git repository with the customizable variables declared in the code (Always best practice. Keep the sensitives out of repos!). Instead, I wanted to implement a way to have a config file where these configurable variables can be set and the main script would load them when launched. A quick \u0026ldquo;DuckDuckGo\u0026rdquo; search led to many others that have had the same goal but I didn\u0026rsquo;t find one that really worked like I had intended. Here are my steps that I used to accomplish what I had in mind.\u003c/p\u003e\n\u003ch2 id=\"the-config-file\"\u003eThe config file\u003c/h2\u003e\n\u003cp\u003eI simply wanted a config file that mimicked what we typically see in a Docker .env file. Each line consists of a variable name and value (key-value pair) in the format \u003ccode\u003e\u0026lt;key\u0026gt;=\u0026lt;value\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere is an example of what that file may look like.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-docker\" data-lang=\"docker\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLISTENIP\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e0.0.0.0\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eLISTENPORT\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eAPPID\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e1cb8ea0e-fa15-47b2-9bd5-957117c01678\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u003c/span\u003eOU\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eOU\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eUsers,DC\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eCorp,DC\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecom\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis aproach provides a very simple layout that is easily recognized and can be repeated without looking back and thinking \u0026ldquo;how did I set that up again?\u0026rdquo;.\u003c/p\u003e\n\u003ch2 id=\"the-powershell-code\"\u003eThe PowerShell Code\u003c/h2\u003e\n\u003cp\u003eThe code snippet to retieve the values and set the variables consists of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eForeach loop to process each line of the file\u003c/li\u003e\n\u003cli\u003eSplits the pair at the first \u0026ldquo;=\u0026rdquo; character\u003c/li\u003e\n\u003cli\u003eSets a variable based on the Name and Value parsed out of each line\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eForeach\u003c/span\u003e ($i \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e $(Get-Content script.conf)){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Set-Variable -Name $i.split(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;=\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] -Value $i.split(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;=\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first line begins the loop with \u003ccode\u003eForeach ($i in $(Get-Content script.conf)){\u003c/code\u003e which pulls in the content of the config file and sets the current line to the value \u003ccode\u003e$i\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor each line we use the \u003ccode\u003esplit\u003c/code\u003e method to pull apart the key/value pair and will use that information to declare the variable.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e$i.split(\u0026quot;=\u0026quot;)[0]\u003c/code\u003e splits the line up into parts using the \u0026ldquo;=\u0026rdquo; as a delimiter and selects the first part in the list ([0]).\u003c/p\u003e\n\u003cp\u003eTypically, each line will only contain one \u0026ldquo;=\u0026rdquo; sign but in some cases this may not be true. One example that I came across was when working with Active Directory DistinguishedNames such as \u0026ldquo;OU=Users,DC=contoso,DC=com\u0026rdquo;. This would allow the name to be parsed but would split the remaining content of the line into additional parts depending on the number of \u0026ldquo;=\u0026rdquo; it contained. \u0026ldquo;DISTINGUISHEDNAME=OU=Users,DC=contoso,DC=com\u0026rdquo; would become:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eDISTINGUISHEDNAME\nOU\nUsers\ncontoso\ncom\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eBut, what we want are the two parts to be:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eDISTINGUISHEDNAME\nOU=Users=contoso=com\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis is why the value is determined via \u003ccode\u003e$i.split(\u0026quot;=\u0026quot;,2)[1]\u003c/code\u003e. The addition of the \u0026ldquo;2\u0026rdquo; after specifiying our delimeter is telling PowerShell to return a maximium of two substrings. So regardless of the amount of \u0026ldquo;=\u0026rdquo; signs in the string it will only split on the first one, returning a name (before the first \u0026ldquo;=\u0026rdquo;) and a value (after the first \u0026ldquo;=\u0026rdquo;).\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e[1]\u003c/code\u003e is used to select the second value in the list and set that as the value of the variable.\u003c/p\u003e\n\u003ch2 id=\"putting-it-to-use\"\u003ePutting it to use\u003c/h2\u003e\n\u003cp\u003eNow that we have the structure in place, lets put it into practice and see what the it looks like all tied together.\u003c/p\u003e\n\u003cp\u003eOur scenario will be I am writing a simple PowerShell script to call a webservice and it requires an API key and a special User-Agent in the HTTP header. Once the script is complete I want to share this with the community but I don\u0026rsquo;t want my API key and User-Agent values included in the script.\u003c/p\u003e\n\u003ch3 id=\"create-the-script\"\u003eCreate the script\u003c/h3\u003e\n\u003cp\u003eThis script makes a GET request against \u003ccode\u003ehttps://swapi.co\u003c/code\u003e, a popular Star Wars API, to find intersting details about a specified starship seen in the films.\u003c/p\u003e\n\u003ch4 id=\"scriptconf\"\u003escript.conf\u003c/h4\u003e\n\u003cp\u003eWe will only be working with two values in the config file. The \u003ccode\u003eAPIKEY\u003c/code\u003e and the \u003ccode\u003eUSERAGENT\u003c/code\u003e.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eAPIKEY=R2D2C3P0BB8\nUSERAGENT=\u0026#39;Luke-SkyWalker\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003ch4 id=\"get-deathstarps1\"\u003eGet-DeathStar.ps1\u003c/h4\u003e\n\u003cp\u003eThe main script uses the snippet shown above to pull in the content of the \u003ccode\u003escript.conf\u003c/code\u003e file and sets the values accordingly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eForeach\u003c/span\u003e ($i \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e $(Get-Content script.conf)){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Set-Variable -Name $i.split(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;=\u0026#34;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] -Value $i.split(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;=\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$Headers = @{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;APIKey\u0026#39;\u003c/span\u003e = $APIKEY\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User-Agent\u0026#39;\u003c/span\u003e = $USERAGENT\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Content-Type\u0026#39;\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$Url = \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;https://swapi.co/api/starships/9/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInvoke-RestMethod -Method GET -Uri $Url -Headers $Headers\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf we inspect the request with a tool such as \u003ccode\u003eFiddler4\u003c/code\u003e we can see our custom values being passed in the header.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eGET https://swapi.co/api/starships/9/ HTTP/1.1\nContent-Type: application/json\nAPIKey: R2D2C3P0BB8\nUser-Agent: \u0026#39;Luke-SkyWalker\u0026#39;\nHost: swapi.co\nConnection: Keep-Alive\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"using-with-git\"\u003eUsing with Git\u003c/h2\u003e\n\u003cp\u003eNow that we have the two components working together how do we address the concens with sharing via Git?\u003c/p\u003e\n\u003cp\u003eFirst, we need to initialize the directory as a Git repository and set the origin.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit init\ngit remote add origin https://github.com/arnydo/get-deathstar.git\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen, we need to create a new file named \u003ccode\u003e.gitignore\u003c/code\u003e. This is where we place regex patterns of anything we do not want to be included when we push this git repo.\u003c/p\u003e\n\u003cp\u003eOur \u003ccode\u003e.gitignore\u003c/code\u003e will include the following:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e*.conf\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis tells git to not include any files that have the \u003ccode\u003e.conf\u003c/code\u003e extension.\u003c/p\u003e\n\u003cp\u003eTo be sure that others who may use this repo understand how to setup the config file for their use, we can create a new file named \u003ccode\u003escript.cong.example\u003c/code\u003e that only contains that variable names that are expected.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eAPIKEY=\nUSERAGENT=\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003eREADME.md\u003c/code\u003e could mention the need to copy the \u003ccode\u003escript.conf.example\u003c/code\u003e to a new file named \u003ccode\u003escript.conf\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e## Before running script\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBe sure to copy the script.conf.example file to script.conf and add your custom values before running the get-deathstar.ps1 script.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, with everything setup we can push our new repository to Github and it will not include our sensitive data.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit add .\ngit commit -m \u0026#34;Initial commit\u0026#34;\ngit push -u origin master\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd that is it! I hope you found this helpful. If you have any questions or ideas for improvement please leave a comment.\u003c/p\u003e\n\u003cp\u003eSee you next time.\u003c/p\u003e\n","description":"Creating a Config File for your PowerShell Scripts","image":"/images/powershell.jpg","permalink":"https://kyleparrish.com/blogs/powershell-script-config-file/","title":"Creating a Config File for your PowerShell Scripts"},{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eHey! Kyle here. I recently released a small update to one of the PowerShell modules I put together to interact with EmailRep\u0026rsquo;s API and thought I would share a little about what it is and why I built it.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/arnydo/psemailrep\"\u003eGithub\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.powershellgallery.com/packages/psemailrep\"\u003ePowerShellGallery\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src=\"https://github.com/arnydo/PSEmailRep/raw/master/Media/screenshot.png\" alt=\"PSEmailRep\"\u003e\u003c/p\u003e\n\u003cp\u003eFirst of all, if you work in Information Security or IT in general, be sure to check out \u003ca href=\"https://emailrep.io\"\u003eEmailRep.io\u003c/a\u003e. This is an excellent service built by a great group of people to provide enrichment data about an email address. Nearly all of our online interactions these days link back to an email address and it is important that we observe the \u0026ldquo;reputation\u0026rdquo; of email addresses that are used to interact with our systems.\u003c/p\u003e\n\u003cp\u003eHere is a brief description of EmailRep by the EmailRep team:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eEmailRep uses hundreds of factors like domain age, traffic rankings, presence on social media sites, professional networking sites, personal connections, public records, deliverability, data breaches, dark web credential leaks, phishing emails, threat actor emails, and more to answer these types of questions:\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eIs this email risky?\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eIs this a throwaway account?\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eWhat kind of online presence does this email have?\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e\u003cem\u003eIs this a trustworthy sender?\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"psemailrep\"\u003ePSEmailRep\u003c/h1\u003e\n\u003ch2 id=\"goals\"\u003eGoals\u003c/h2\u003e\n\u003cp\u003eAfter using EmailRep for a short time I quickly realized the value that it would add to my daily routines of triaging phishing emails and maintaing the many security aspects of our environment. With PowerShell being my daily-driver for automation and security tools I decided to put together a module that would interact with the EmailRep API. Seeing that nobody else at the time had been working on one I figured it would be a good project to start and share with the community. Some of the things that I was looking to accomplish were:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMaintained in a Github repo\u003c/li\u003e\n\u003cli\u003ePublished to PowerShellGallery\u003c/li\u003e\n\u003cli\u003eHelpful documentation on the available features\u003c/li\u003e\n\u003cli\u003eDeployment pipeline\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKeep an eye out for a follow-up post on how I tackled these points. I learned a ton about building a module template with \u003ca href=\"https://github.com/PowerShell/Plaster\"\u003ePlaster\u003c/a\u003e, running various checks with \u003ca href=\"https://github.com/pester/Pester\"\u003ePester\u003c/a\u003e, and preparing it to be pushed out to a central repository such as PowerShellGallery with \u003ca href=\"https://github.com/RamblingCookieMonster/PSDeploy\"\u003ePSDeploy\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-module\"\u003eThe Module\u003c/h2\u003e\n\u003cp\u003eThe goal of the PowerShell module isn\u0026rsquo;t to recreate the wheel, rather, simply take advantage of what is already available. The only thing I needed to do was to find a way to streamline it into my daily routines. The obvious choice for me was a PowerShell module\u0026hellip;because\u0026hellip;PowerShell! The available functions mimick what is currently available in the \u003ca href=\"https://docs.emailrep.io/\"\u003eAPI Docs\u003c/a\u003e and as new endpoints are added more functions may be added to the module. Here are the current functions and what they are used for.\u003c/p\u003e\n\u003ch3 id=\"ps-get-emailrep\"\u003ePS\u0026gt; Get-EmailRep\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e❯\u003c/span\u003e Get-EmailRep bill@microsoft.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eemail                      \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e bill@microsoft.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ereputation                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e high\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspicious                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ereferences                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e85\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eblacklisted                \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emalicious_activity         \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emalicious_activity_recent  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecredentials_leaked         \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecredentials_leaked_recent  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata_breach                \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efirst_seen                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e07\u003c/span\u003e/\u003cspan style=\"color:#ae81ff\"\u003e01\u003c/span\u003e/\u003cspan style=\"color:#ae81ff\"\u003e2008\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elast_seen                  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e/\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e/\u003cspan style=\"color:#ae81ff\"\u003e2019\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edomain_exists              \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edomain_reputation          \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e high\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_domain                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edays_since_domain_creation \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10512\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esuspicious_tld             \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003espam                       \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efree_provider              \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edisposable                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edeliverable                \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eaccept_all                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evalid_mx                   \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003espoofable                  \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003espf_strict                 \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edmarc_enforced             \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprofiles                   \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:\u003c/span\u003e {twitter, vimeo, pinterest, angellist...}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis function does a GET query against the EmailRep API to collect what is already known, if anything, about the email address. In this case, \u003ca href=\"mailto:bill@microsoft.com\"\u003ebill@microsoft.com\u003c/a\u003e has several different peices of enrichment data that could help determine the reputation of the address. Now, most of this information is simply information and it is up to you to determine what you do with that information. In this case, EmailRep believes the reputation of this address to be \u0026ldquo;high\u0026rdquo;, but that does not mean that it is \u0026ldquo;good\u0026rdquo; or \u0026ldquo;trusted\u0026rdquo;. This simply means that there is enough information about address that it has a reputation.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHow can I use this information?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWell, lets take a look at the following:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eblacklisted                : False\nmalicious_activity         : False\nmalicious_activity_recent  : False\ncredentials_leaked         : True\ncredentials_leaked_recent  : False\ndata_breach                : True\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis information indicates that while there are no reports of malicious activity on the account there are reports that it has been listed in recent breach reports or credential leaks. This is important to consider when allowing this account to interact with users in your environment or with your services. It is possible that the account is in possession of a malicious actor and does not have the best of intentions. This may trigger you to look further into the account or require additional verification before proceeding.\u003c/p\u003e\n\u003cp\u003eThese indicators are what I find very useful when triaging phishing emails:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edomain_exists              : True\ndomain_reputation          : high\nnew_domain                 : False\ndays_since_domain_creation : 10512\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eA quick look at the domain details helps identify if this is a newly created domain and what the current reputation on that domain is. Often times, we will see that phishing emails are originating from domains that are only hours, or sometimes minutes, old. This typically an indicator of malicious activity.\u003c/p\u003e\n\u003cp\u003eYou can take a look at the meaning of each attribute by heading over to the \u003ca href=\"https://docs.emailrep.io/technical-reference/reference/email/getemail\"\u003eAPI Docs\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"ps-new-emailrep\"\u003ePS\u0026gt; New-EmailRep\u003c/h3\u003e\n\u003cp\u003eThis function is used to report email addresses to the EmailRep API. It does require an API key and you can request one over at \u003ca href=\"https://emailrep.io/key\"\u003eEmailRep\u0026rsquo;s site\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAn example report would look like:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-powershell\" data-lang=\"powershell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNew-EmailRep -Email bill@microsoft.com `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     -Tags bec,credential_phishing `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     -Description \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Compromised account sending Sharepoint login page clone\u0026#39;\u003c/span\u003e `\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     -APIKey \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;4a534f4e20697320626574746572207468616e20584d4c21\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis will report to EmailRep that \u003ca href=\"mailto:bill@microsoft.com\"\u003ebill@microsoft.com\u003c/a\u003e has been involved in a \u003ca href=\"https://www.trendmicro.com/vinfo/us/security/definition/business-email-compromise-(bec)\"\u003eBusiness Email Compromise\u003c/a\u003e and is sending credential phishing via fake Sharepoint login pages.\u003c/p\u003e\n\u003cp\u003eWhile the EmailRep API does not yet allow you to review these reports once they are submitted it is certainly on the road map. Having access to this data will greatly improve the accuracy of the determined \u0026lsquo;reputation\u0026rsquo; of the email address.\u003c/p\u003e\n\u003ch3 id=\"ps-set-emailrep\"\u003ePS\u0026gt; Set-EmailRep\u003c/h3\u003e\n\u003cp\u003eThis function is used to save your API key to your user profile so you do not need to include it on every execution. Currently, this utilized PowerShell\u0026rsquo;s \u003ca href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/convertto-securestring?view=powershell-7\"\u003esecure string\u003c/a\u003e capabilities to encrypt the key in an XML file for later retrieval (each time Get-EmailRep or New-EmailRep is called). This key can only be read by the user that set it thanks to \u003ca href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/convertfrom-securestring?view=powershell-7#description\"\u003eWindows DPAPI\u003c/a\u003e. DPAPI is also a great topic to discuss. I learned a lot about how it is used and the risk it introduces\u0026hellip;but that is for another day.\u003c/p\u003e\n\u003cp\u003eTo use \u003ccode\u003eset-emailrep\u003c/code\u003e simply run the command and enter in your APIKey. If you have previously ran this command it will alert you and ask if you would like to overwrite the existing entry.\u003c/p\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eThis has been a learning process and opened up many new rabbit holes to follow. I plan on continueing to share these as I tackle them. Hopefully somebody out there will find it useful. I know I wouldn\u0026rsquo;t be where I am at without the contributions that others have made to the community. It is by their encouragement that I want to share my experiences as well and return the favor. Let me know what you think and if you have any questions about PSEmailRep!\u003c/p\u003e\n","description":"Using the PSEmailRep PowerShell Module","image":"/images/sublime-logo.png","permalink":"https://kyleparrish.com/blogs/using-psemailrep/","title":"PSEmailRep PowerShell Module"}]